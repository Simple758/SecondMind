{
  "version": "1.0",
  "steps": [
    {
      "op": "open",
      "file": "app/build.gradle"
    },
    {
      "op": "insert",
      "file": "app/build.gradle",
      "after": "dependencies {",
      "text": "\n    // --- News feature deps (guarded) ---\n    if (!configurations.findByName(\"implementation\").allDependencies.any{ it.group==\"com.squareup.retrofit2\" }) {\n        implementation \"com.squareup.retrofit2:retrofit:2.9.0\"\n        implementation \"com.squareup.retrofit2:converter-gson:2.9.0\"\n        implementation \"com.squareup.okhttp3:okhttp:4.12.0\"\n        implementation \"com.squareup.okhttp3:logging-interceptor:4.12.0\"\n        implementation \"io.coil-kt:coil-compose:2.6.0\"\n    }\n",
      "guard": "retrofit2:retrofit|coil-compose"
    },
    {
      "op": "insert",
      "file": "app/build.gradle",
      "after": "buildTypes {",
      "text": "\n        // --- News API key (guarded) ---\n        debug {\n            if (System.getenv(\"NEWS_API_KEY\") != null || project.hasProperty(\"NEWS_API_KEY\")) {\n                buildConfigField(\"String\",\"NEWS_API_KEY\",\"\\\"\" + (project.findProperty(\"NEWS_API_KEY\") ?: System.getenv(\"NEWS_API_KEY\")) + \"\\\"\")\n            } else {\n                buildConfigField(\"String\",\"NEWS_API_KEY\",\"\\\"\\\"\")\n            }\n        }\n        release {\n            if (System.getenv(\"NEWS_API_KEY\") != null || project.hasProperty(\"NEWS_API_KEY\")) {\n                buildConfigField(\"String\",\"NEWS_API_KEY\",\"\\\"\" + (project.findProperty(\"NEWS_API_KEY\") ?: System.getenv(\"NEWS_API_KEY\")) + \"\\\"\")\n            } else {\n                buildConfigField(\"String\",\"NEWS_API_KEY\",\"\\\"\\\"\")\n            }\n        }\n",
      "guard": "NEWS_API_KEY"
    },
    {
      "op": "open",
      "file": "app/src/main/java/com/secondmind/minimal/MainActivity.kt"
    },
    {
      "op": "insert",
      "file": "app/src/main/java/com/secondmind/minimal/MainActivity.kt",
      "after": "package com.secondmind.minimal",
      "text": "\n// --- AGENT: Temporary NewsScreen and fetch using Retrofit ---\nimport android.content.Intent\nimport android.net.Uri\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport coil.compose.AsyncImage\nimport com.secondmind.minimal.BuildConfig\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.GET\nimport retrofit2.http.Query\n\nprivate data class NewsSource(val id:String?, val name:String?)\nprivate data class NewsArticle(\n    val source: NewsSource?, val author:String?, val title:String?,\n    val description:String?, val url:String?, val urlToImage:String?, val publishedAt:String?, val content:String?\n)\nprivate data class TopHeadlinesResponse(val status:String?, val totalResults:Int?, val articles:List<NewsArticle>?)\n\nprivate interface NewsApi {\n    @GET(\"/v2/top-headlines\")\n    suspend fun top(\n        @Query(\"category\") category:String = \"technology\",\n        @Query(\"country\") country:String = \"us\",\n        @Query(\"apiKey\") apiKey:String\n    ): TopHeadlinesResponse\n}\n\n@Composable\nfun NewsScreen() {\n    val apiKey = BuildConfig.NEWS_API_KEY\n    var state by remember { mutableStateOf<Result<List<NewsArticle>>?>(null) }\n\n    LaunchedEffect(apiKey) {\n        state = try {\n            val retrofit = Retrofit.Builder()\n                .baseUrl(\"https://newsapi.org\")\n                .addConverterFactory(GsonConverterFactory.create())\n                .build()\n            val svc = retrofit.create(NewsApi::class.java)\n            val res = withContext(Dispatchers.IO) { svc.top(apiKey = apiKey) }\n            if (res.status == \"ok\" && !res.articles.isNullOrEmpty()) Result.success(res.articles!!) else Result.failure(Exception(\"No articles\"))\n        } catch (t:Throwable) { Result.failure(t) }\n    }\n\n    val r = state\n    when {\n        r == null -> Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) { CircularProgressIndicator() }\n        r.isSuccess -> NewsList(r.getOrNull().orEmpty())\n        else -> Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n            Column(horizontalAlignment = Alignment.CenterHorizontally) {\n                Text(\"Failed to load news\")\n                Spacer(Modifier.height(8.dp))\n                Button({ state = null }) { Text(\"Retry\") }\n            }\n        }\n    }\n}\n\n@Composable private fun NewsList(items: List<NewsArticle>) {\n    LazyColumn(contentPadding = PaddingValues(16.dp)) {\n        items(items) { a ->\n            Card(Modifier.fillMaxWidth()) {\n                Column(Modifier.padding(16.dp)) {\n                    if (a.urlToImage != null) {\n                        AsyncImage(model=a.urlToImage, contentDescription=null, modifier=Modifier.fillMaxWidth().height(180.dp))\n                        Spacer(Modifier.height(8.dp))\n                    }\n                    Text(a.title ?: \"(no title)\", style=MaterialTheme.typography.titleMedium)\n                    Spacer(Modifier.height(4.dp))\n                    Text(a.source?.name ?: \"\", style=MaterialTheme.typography.bodySmall)\n                    Spacer(Modifier.height(8.dp))\n                    Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.End) {\n                        val url=a.url\n                        Button(enabled = url!=null, onClick = { url?.let { it1 ->\n                            val ctx = androidx.compose.ui.platform.LocalContext.current\n                            ctx.startActivity(Intent(Intent.ACTION_VIEW, Uri.parse(it1)))\n                        } }) { Text(\"Open\") }\n                    }\n                }\n            }\n            Spacer(Modifier.height(12.dp))\n        }\n    }\n}\n// --- AGENT END ---\n",
      "guard": "@Composable\\s+fun\\s+NewsScreen\\("
    },
    {
      "op": "insert",
      "file": "app/src/main/java/com/secondmind/minimal/MainActivity.kt",
      "after": "setContent(",
      "text": "\n// AGENT: temporary entry point to NewsScreen\nNewsScreen()\n",
      "guard": "NewsScreen\\(\\)"
    }
  ]
}